{\rtf1\ansi\ansicpg936\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red26\green26\blue26;\red255\green255\blue255;
\red237\green237\blue237;}
\paperw15840\paperh12240\margl1440\margr1440\vieww22020\viewh14580\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs28 \cf2 HOMEWORK 7
\b0 \
\
Maybe I'll add some more later on, but here's something to nibble on for now. Use the stacked.csv file from class.\
\
1) I'd like you to make a new column that's the integer difference between the original amount and the current amount. What's the largest? What's the smallest?\
\
 As you know, the variable value is the value of the cell you're working on, but what if you want a different cell? You need to use cells['Column Name']['value'].\
\
 3) You'll need a new column called 
\f1 scale
\f0 \'a0that categorizes each contract based on how large the Original Amount is. if the original amount is 0-9, scale should be 1, if 10-99, 2, if 100-999, 3, etc. Think about converting between data types, and watch out for decimals!\
\
If you run a text facet for the above, the results should be:\

\f1 \
1 - 83
\f0 \

\f1 3 - 85
\f0 \

\f1 4 - 2942
\f0 \

\f1 5 - 15963
\f0 \

\f1 6 - 7252
\f0 \

\f1 7 - 3229
\f0 \

\f1 8 - 561
\f0 \

\f1 9 - 42
\f0 \

\f1 10 - 4
\f0 \
\
4) What's the most popular agency for $100mil-$1bil contracts? How about contracts between $100-$1000? $1000-$10,000?\
\
5) How many contracts have had >80 versions?\
\
5) Convert End Date to a date and find out how many contracts are ending in 2025 or later.\
\
6) What are the top two vendors for consulting? How about for construction?\
\
7) Use the grouping magic down below to clean up as much as you can under both Vendor and Purpose. Export as a CSV, saved as 'cleaned.csv' and post it in the 
\b #hw
\b0  channel on Slack.\
\

\b WORKING ON A SUBSET FOR CLEANING AND CLUSTERING
\b0 \
\
So Google Refine can't work with all 30,000 rows all at once, right? So it might be best to segment. While you could pull out a number from the original amount or assign an id or alphabetize and take the first X, it's easier to make it happen randomly.\
\
Click the down arrow by 
\b Contract ID
\b0 , then 
\b Edit Column...
\b0  and 
\b Add Column Based On This Column
\b0 . We aren't going to be basing it on that column, but it's the pathway to adding a new column.\
\
Change the column title to "
\b grouping
\b0 ".\
\
Where it says Language: 
\b GREL
\b0 , change it to be Language: 
\b Jython
\b0 . Jython is Python that runs on Java (which is what Google Refine is built in). So more or less it's Python.\
\
The big difference with using Python in Google Refine is you need to use a "return" statement to send your info back to Google Refine. Whereas before we could simply type 
\b value
\b0 \'a0to copy the column over, now we would need to do 
\b return value
\b0 .\
\
To assign a random group, we need to import a library called 
\b random
\b0  and then use the 
\b randrange()
\b0  method to pull in a random number between 0 and n (n being the number of groups you'd like). If you want 1000 elements in each group, you're looking at 30000/100 = 30 different groups. So,\
\

\f1 import random
\f0 \

\f1 return random.randrange(0,30)
\f0 \
\
And click 'OK'. Then you'll be able to run 
\b Facet
\b0  > 
\b Text Facet
\b0  and work on one selection at a time by clicking a specific group number.\
\
If you'd like to rearrange your groupings, click the arrow next to 
\b groupings
\b0 , 
\b Edit Cells... > Transform
\b0 . Put the random code up above back in and voila! all new groups.\
\
*******************\
\
\pard\pardeftab720
\cf3 \cb4 Since folks seem to be having a little trouble with number one -\'a0\
\
If you're using Jython mode (which you should!) you 
\b MUST
\b0  use 'return' to send a value back to the cell. i.e.\'a0
\b return 3
\b0  will make every value equal to 3.\
\
For accessing other cells, you use a little trick: if you want to access the value of \'a0the column called "Version", you use
\f2\b cells["Version"]["value"]
\f0\b0 . If you want to access Expense Category, the spaces are fine since it's a string - you'd use\'a0
\b cells["Expense Category"]["value"]
\b0 . Same thing for all the rest.\
\
When you're using Jython, you can pretend it's a normal python script and type all sorts of lines before you actually return a value to the cell. For example:\
\
\pard\pardeftab720

\f1 \cf3 original = cells["Original Value"]["value"]
\f0 \

\f1 bigger = original * 2
\f0 \

\f1 return\'a0bigger
\f0 \
\
would get the value from the "Original Value" cell, double it, and set whatever cell you're working on to that value.\
\
When you're 
\b submitting
\b0  the homework parts other than the exported CSV (which goes to me), put together a text file with the answers and submit it to Roger via Slack.\
\
Hope that helps!\
\pard\pardeftab720
\cf2 \cb1 \
\pard\pardeftab720\sl120
\cf2 \cb5 \
}